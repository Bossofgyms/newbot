# horoscope_api.py
import aiohttp
import random
from datetime import datetime
import urllib.parse
import hashlib
import re
import json

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∏ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω—ã
try:
    from config import HOROSCOPE_SOURCES, ASTRO_API_BASE
    from zodiac import get_zodiac_sign, ZODIAC_API_MAP # <-- –í–ê–ñ–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º get_zodiac_sign
except ImportError as e:
    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏: {e}")
    HOROSCOPE_SOURCES = {}
    ASTRO_API_BASE = "https://aztro.sameerkumar.website"
    get_zodiac_sign = lambda d, m: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    ZODIAC_API_MAP = {"–û–≤–µ–Ω": "aries"}

# --- –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ ---
# PLANET_INFLUENCES_DETAILED —É–¥–∞–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É

MOON_PHASE_DESCRIPTIONS = {
    "–ù–æ–≤–æ–ª—É–Ω–∏–µ": "üåë –ù–æ–≤–æ–ª—É–Ω–∏–µ - –≤—Ä–µ–º—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞–±–æ—Ç—ã –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–µ–π. –≠–Ω–µ—Ä–≥–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è, –∑–∞—Ä—è–∂–∞–π—Ç–µ—Å—å –∏–¥–µ—è–º–∏.",
    "–ú–æ–ª–æ–¥–∞—è –ª—É–Ω–∞": "üåí –ú–æ–ª–æ–¥–∞—è –ª—É–Ω–∞ - —Ñ–∞–∑–∞ —Ä–æ—Å—Ç–∞ –∏ –ø–µ—Ä–≤—ã—Ö —à–∞–≥–æ–≤. –ù–∞—á–∏–Ω–∞–π—Ç–µ –≤–æ–ø–ª–æ—â–∞—Ç—å –∏–¥–µ–∏ –≤ –∂–∏–∑–Ω—å, —ç–Ω–µ—Ä–≥–∏—è –Ω–∞–±–∏—Ä–∞–µ—Ç —Å–∏–ª—É.",
    "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å": "üåì –ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å - –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å.",
    "–ü—Ä–∏–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞": "üåî –ü—Ä–∏–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É, —ç–Ω–µ—Ä–≥–∏—è —Å–∏–ª—å–Ω–∞. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤.",
    "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ": "üåï –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ - –ø–∏–∫ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —ç–º–æ—Ü–∏–π. –í–∏–¥–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –ø–µ—Ä–µ–≥—Ä—É–∑—ã. –•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
    "–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞": "üåñ –£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞ - —Ñ–∞–∑–∞ —Å–ø–∞–¥–∞. –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ—Ç–ø—É—Å–∫–∞—Ç—å, –∑–∞–≤–µ—Ä—à–∞—Ç—å –¥–µ–ª–∞, —É–º–µ–Ω—å—à–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.",
    "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å": "üåó –ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å - –≤—Ä–µ–º—è –æ—á–∏—â–µ–Ω–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–ø—Ä—è–∂—ë–Ω–Ω–æ–π, –Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.",
    "–°—Ç–∞—Ä–∞—è –ª—É–Ω–∞": "üåò –°—Ç–∞—Ä–∞—è –ª—É–Ω–∞ - –≥–ª—É–±–æ–∫–∏–π –æ—Ç–¥—ã—Ö –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ü–∏–∫–ª–æ–º. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
}

# –°–ª–æ–≤–∞—Ä—å –ø—Ä–∏—Ä–æ–¥–Ω—ã—Ö –∫–∞–º–Ω–µ–π –¥–ª—è –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
ZODIAC_STONES = {
    "–û–≤–µ–Ω": "–Ø—à–º–∞",
    "–¢–µ–ª–µ—Ü": "–°–µ—Ä–¥–æ–ª–∏–∫",
    "–ë–ª–∏–∑–Ω–µ—Ü—ã": "–ê–≥–∞—Ç",
    "–†–∞–∫": "–ò–∑—É–º—Ä—É–¥",
    "–õ–µ–≤": "–û–Ω–∏–∫—Å",
    "–î–µ–≤–∞": "–°–∞–ø—Ñ–∏—Ä",
    "–í–µ—Å—ã": "–û–ø–∞–ª",
    "–°–∫–æ—Ä–ø–∏–æ–Ω": "–¢–æ–ø–∞–∑",
    "–°—Ç—Ä–µ–ª–µ—Ü": "–ê–º–µ—Ç–∏—Å—Ç",
    "–ö–æ–∑–µ—Ä–æ–≥": "–ì—Ä–∞–Ω–∞—Ç",
    "–í–æ–¥–æ–ª–µ–π": "–ì–µ–ª–∏–æ–¥–æ—Ä (–∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π –±–µ—Ä–∏–ª–ª)",
    "–†—ã–±—ã": "–ê–∫–≤–∞–º–∞—Ä–∏–Ω"
}

# URL –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ rambler.ru
ZODIAC_RAMBLER_URLS = {
    "–û–≤–µ–Ω": "https://horoscopes.rambler.ru/aries/today/",
    "–¢–µ–ª–µ—Ü": "https://horoscopes.rambler.ru/taurus/today/",
    "–ë–ª–∏–∑–Ω–µ—Ü—ã": "https://horoscopes.rambler.ru/gemini/today/",
    "–†–∞–∫": "https://horoscopes.rambler.ru/cancer/today/",
    "–õ–µ–≤": "https://horoscopes.rambler.ru/leo/today/",
    "–î–µ–≤–∞": "https://horoscopes.rambler.ru/virgo/today/",
    "–í–µ—Å—ã": "https://horoscopes.rambler.ru/libra/today/",
    "–°–∫–æ—Ä–ø–∏–æ–Ω": "https://horoscopes.rambler.ru/scorpio/today/",
    "–°—Ç—Ä–µ–ª–µ—Ü": "https://horoscopes.rambler.ru/sagittarius/today/",
    "–ö–æ–∑–µ—Ä–æ–≥": "https://horoscopes.rambler.ru/capricorn/today/",
    "–í–æ–¥–æ–ª–µ–π": "https://horoscopes.rambler.ru/aquarius/today/",
    "–†—ã–±—ã": "https://horoscopes.rambler.ru/pisces/today/",
}

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ –¥–µ–Ω—å
horoscope_cache = {}
# --- –ö–æ–Ω–µ—Ü —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ ---

# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ì–û–†–û–°–ö–û–ü–ê ---
async def get_daily_horoscope(sign: str, birth_day: int = None, birth_month: int = None) -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    Args:
        sign (str): –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        birth_day (int, optional): –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. Defaults to None.
        birth_month (int, optional): –ú–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. Defaults to None.
    """
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
    cache_key = f"{sign}_{datetime.now().strftime('%Y-%m-%d_%H')}"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if cache_key in horoscope_cache:
        return horoscope_cache[cache_key]

    # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ—Ç–∞—Ö –∏ –∏—Ö –ø–æ–ª–æ–∂–µ–Ω–∏–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è!)
    planetary_info = await get_planetary_positions(birth_day, birth_month)

    # 2. –ü–æ–ª—É—á–∞–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –∏–∑ API (–Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å Rambler)
    astro_forecast = await get_astrological_forecast(sign)

    # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞ (PLANET_INFLUENCES_DLAILED –±–æ–ª—å—à–µ –Ω–µ—Ç)
    enhanced_description = await generate_enhanced_forecast_text(sign, astro_forecast, planetary_info)

    # 4. –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–º–µ—â–∞—è —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ description
    result = {
        "sign": sign,
        "date": datetime.now().strftime("%d.%m.%Y"),
        "planetary_positions": planetary_info,
        "forecast": astro_forecast, # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API
        # "planetary_influences": {}, # –£–¥–∞–ª–µ–Ω–æ
        "description": enhanced_description, # –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        "compatibility": astro_forecast.get('compatibility', ''),
        "mood": astro_forecast.get('mood', ''),
        "color": astro_forecast.get('color', ''),
        "lucky_number": astro_forecast.get('lucky_number', ''),
        "lucky_time": astro_forecast.get('lucky_time', '')
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    horoscope_cache[cache_key] = result
    return result
# --- –ö–û–ù–ï–¶ –û–°–ù–û–í–ù–û–ô –§–£–ù–ö–¶–ò–ò ---

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ì–û–†–û–°–ö–û–ü–ê ---
async def generate_enhanced_forecast_text(sign: str, forecast_data: dict, planetary_info: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ---
    forecast_text = f"üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign} –Ω–∞ {datetime.now().strftime('%d.%m.%Y')}\n"

    # 1. –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –∏–∑ API (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Å–µ—Ä–≤–∏—Å—É)
    api_description = forecast_data.get('description', '').strip()
    # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    # API —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    if api_description and len(api_description) > 10:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        if re.search(r'[–∞-—è–ê-–Ø]', api_description[:100]):
             forecast_text += f"‚ú® –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {sign}:\n{api_description}\n"
        else:
             # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏—à–µ–ª –Ω–µ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏
             print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü–æ–ª—É—á–µ–Ω –Ω–µ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è {sign}, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏.")
             translated_description = await translate_text(api_description)
             if translated_description and len(translated_description.strip()) > 10 and re.search(r'[–∞-—è–ê-–Ø]', translated_description[:100]):
                 forecast_text += f"‚ú® –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {sign}:\n{translated_description.strip()}\n"
             else:
                 # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–ª–±—ç–∫
                 forecast_text += f"‚ú® –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {sign}:\n{api_description}\n"
    else:
        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–ª–±—ç–∫
        fallback_forecasts = {
            "–û–≤–µ–Ω": "–°–µ–≥–æ–¥–Ω—è –≤–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è –Ω–∞ –ø–∏–∫–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–∞–∂–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –≤ –ª–∏—á–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö - –∏–∑–±–µ–≥–∞–π—Ç–µ –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.",
            "–¢–µ–ª–µ—Ü": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—è—Ç—Å—è –≤–∞–º —Å–µ–≥–æ–¥–Ω—è. –î–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –≤ –¥–µ–Ω–µ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ.",
            "–ë–ª–∏–∑–Ω–µ—Ü—ã": "–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏—è. –í–∞—à–∏ –∏–¥–µ–∏ –±—É–¥—É—Ç –æ—Å–æ–±–µ–Ω–Ω–æ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω—ã. –ò–∑–±–µ–≥–∞–π—Ç–µ –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç–∏ - —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–º.",
            "–†–∞–∫": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –≥–æ–ª–æ—Å–∞–º. –î–æ–º –∏ —Å–µ–º—å—è —Ç—Ä–µ–±—É—é—Ç –≤–∞—à–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è.",
            "–õ–µ–≤": "–í–∞—à–∞ —Ö–∞—Ä–∏–∑–º–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π. –ù–µ –±–æ–π—Ç–µ—Å—å –ø—Ä–æ—è–≤–ª—è—Ç—å –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞, –Ω–æ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö.",
            "–î–µ–≤–∞": "–°–µ–≥–æ–¥–Ω—è –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –í–∞—à–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ–º–æ–≥—É—Ç —Ä–µ—à–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–µ—Ç–∞–ª–∏.",
            "–í–µ—Å—ã": "–ë–∞–ª–∞–Ω—Å –∏ –≥–∞—Ä–º–æ–Ω–∏—è - –≤–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–µ–≥–æ–¥–Ω—è. –ò—â–∏—Ç–µ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö. –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ –≤–¥–æ—Ö–Ω–æ–≤—è—Ç –≤–∞—Å.",
            "–°–∫–æ—Ä–ø–∏–æ–Ω": "–ì–ª—É–±–æ–∫–∏–µ —ç–º–æ—Ü–∏–∏ –∏ –∏–Ω—Ç—É–∏—Ü–∏—è –±—É–¥—É—Ç –≤–∞—à–∏–º–∏ —Å–æ—é–∑–Ω–∏–∫–∞–º–∏. –°–µ–≥–æ–¥–Ω—è –≤—ã —Å–ø–æ—Å–æ–±–Ω—ã —É–≤–∏–¥–µ—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –º–æ—Ç–∏–≤—ã. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å —Ä–µ–≤–Ω–æ—Å—Ç—å—é.",
            "–°—Ç—Ä–µ–ª–µ—Ü": "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∏ –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –∂–¥—É—Ç –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è. –†–∞—Å—à–∏—Ä—å—Ç–µ —Å–≤–æ–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã. –ò–∑–±–µ–≥–∞–π—Ç–µ –∏–º–ø—É–ª—å—Å–∏–≤–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π.",
            "–ö–æ–∑–µ—Ä–æ–≥": "–í–∞—à–∞ —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª—ë–Ω–Ω–æ—Å—Ç—å –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –ø—Ä–∏–Ω–µ—Å—É—Ç —É—Å–ø–µ—Ö–∏. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö —Ü–µ–ª—è—Ö. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏.",
            "–í–æ–¥–æ–ª–µ–π": "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏ –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ - –≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Å–µ–≥–æ–¥–Ω—è. –†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ –≥—Ä—É–ø–ø–æ–≤—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏. –ë—É–¥—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã –Ω–æ–≤–æ–º—É.",
            "–†—ã–±—ã": "–í–∞—à–∞ –∏–Ω—Ç—É–∏—Ü–∏—è –æ—Å–æ–±–µ–Ω–Ω–æ –æ—Å—Ç—Ä–∞ —Å–µ–≥–æ–¥–Ω—è. –î–æ–≤–µ—Ä—è–π—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É. –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –±—É–¥—É—Ç —É—Å–ø–µ—à–Ω—ã. –ò–∑–±–µ–≥–∞–π—Ç–µ —á—Ä–µ–∑–º–µ—Ä–Ω–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."
        }
        forecast_text += f"‚ú® –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {sign}:\n{fallback_forecasts.get(sign, '–°–µ–≥–æ–¥–Ω—è –∑–≤–µ–∑–¥—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω—ã –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ –Ω–µ —É–ø—É—Å–∫–∞–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤—è—Ç—Å—è –≤–∞–º —Å–µ–≥–æ–¥–Ω—è.')}\n"

    # 2. –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    # sun_sign = planetary_info.get('sun_sign', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') # –£–±—Ä–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º real_sun_sign
    moon_phase = planetary_info.get('moon_phase', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    mercury_retrograde = planetary_info.get('mercury_retrograde', False)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    real_sun_sign = await get_real_sun_sign()
    real_moon_phase = await get_real_moon_phase()
    real_mercury_retrograde = await check_real_mercury_retrograde()

    forecast_text += "üåå –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è —Å–µ–≥–æ–¥–Ω—è:\n"
    forecast_text += f"‚Ä¢ ‚òÄÔ∏è –°–æ–ª–Ω—Ü–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–Ω–∞–∫–µ {real_sun_sign} (—Å–µ–≥–æ–¥–Ω—è)\n"
    forecast_text += f"‚Ä¢ {MOON_PHASE_DESCRIPTIONS.get(real_moon_phase, f'‚Ä¢ üåï –õ—É–Ω–∞ –≤ —Ñ–∞–∑–µ {real_moon_phase}')}\n"
    if real_mercury_retrograde:
        forecast_text += "‚Ä¢ ‚òøÔ∏è –ú–µ—Ä–∫—É—Ä–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏! –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –≤ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è—Ö, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ—Ç–ª–æ–∂–∏—Ç–µ –∑–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö IT-–ø—Ä–æ–µ–∫—Ç–æ–≤.\n"
    forecast_text += "\n"

    # 3. –í–ª–∏—è–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –Ω–∞ –∑–Ω–∞–∫ - –£–ë–†–ê–ù–û –ø–æ –∑–∞–ø—Ä–æ—Å—É
    # (–£–¥–∞–ª–µ–Ω –±–ª–æ–∫ –∫–æ–¥–∞, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ —ç—Ç–æ)
    # if influences:  # influences - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –≤–ª–∏—è–Ω–∏—è–º–∏ –ø–ª–∞–Ω–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, PLANET_INFLUENCES_DETAILED[sign]
    #     forecast_text += f"\nü™ê –í–ª–∏—è–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –Ω–∞ {sign}:\n"
    #     # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ influences - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ –ø–ª–∞–Ω–µ—Ç
    #     # –û–±—ã—á–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤–ª–∏—è–Ω–∏—è –°–æ–ª–Ω—Ü–∞, –õ—É–Ω—ã, –ú–µ—Ä–∫—É—Ä–∏—è, –í–µ–Ω–µ—Ä—ã, –ú–∞—Ä—Å–∞
    #     planet_symbols = {'sun': '‚òÄÔ∏è', 'moon': 'üåô', 'mercury': '‚òøÔ∏è', 'venus': '‚ôÄÔ∏è', 'mars': '‚ôÇÔ∏è'}
    #     
    #     for planet_key in ['sun', 'moon', 'mercury', 'venus', 'mars']: # –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω
    #         desc = influences.get(planet_key)
    #         if desc:
    #             symbol = planet_symbols.get(planet_key, '')
    #             # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–æ–π –≤–ª–∏—è–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã
    #             forecast_text += f"{symbol} {desc}\n" 
    # forecast_text += "\n" # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –≤–ª–∏—è–Ω–∏—è –ø–ª–∞–Ω–µ—Ç

    # 4. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π)
    recommendations = []
    if real_mercury_retrograde:
        recommendations.append("‚Ä¢ –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏.")
        recommendations.append("‚Ä¢ –ù–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ä–æ—á–Ω–æ.")
        recommendations.append("‚Ä¢ –û—Ç–ª–æ–∂–∏—Ç–µ –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏.")
    if "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ" in real_moon_phase:
        recommendations.append("‚Ä¢ –≠–º–æ—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞–ø—Ä—è–∂—ë–Ω–Ω—ã–º–∏, –Ω–∞–π–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è.")
        recommendations.append("‚Ä¢ –•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤.")
    elif "–ù–æ–≤–æ–ª—É–Ω–∏–µ" in real_moon_phase:
        recommendations.append("‚Ä¢ –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–µ–π.")
        recommendations.append("‚Ä¢ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞–±–æ—Ç–µ.")

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—Ä–æ–¥–Ω—ã–π –∫–∞–º–µ–Ω—å
    zodiac_stone = ZODIAC_STONES.get(sign, "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

    if recommendations:
        forecast_text += "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –¥–µ–Ω—å:\n"
        forecast_text += "\n".join(recommendations) + "\n"
        # –í–º–µ—Å—Ç–æ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö —á–∏—Å–µ–ª –∏ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–º–µ–Ω—å
        forecast_text += f"\nü™® –í–∞—à –ø—Ä–∏—Ä–æ–¥–Ω—ã–π –∫–∞–º–µ–Ω—å: {zodiac_stone}\n"
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –∫–∞–º–µ–Ω—å
        forecast_text += f"ü™® –ü—Ä–∏—Ä–æ–¥–Ω—ã–π –∫–∞–º–µ–Ω—å {sign}: {zodiac_stone}\n"

    return forecast_text.strip()
# --- –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ô –î–õ–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ì–û–†–û–°–ö–û–ü–ê ---

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ê–°–¢–†–û–õ–û–ì–ò–ß–ï–°–ö–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò ---
async def get_planetary_positions(birth_day: int = None, birth_month: int = None) -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π.
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã birth_day –∏ birth_month, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–Ω–∞–∫ –°–æ–ª–Ω—Ü–∞ –¥–ª—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è.
    """
    try:
        current_date = datetime.now().strftime("%Y-%m-%d")
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫ –°–æ–ª–Ω—Ü–∞ –¥–ª—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è, –∞ –Ω–µ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        sun_sign = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if birth_day is not None and birth_month is not None:
            sun_sign = get_zodiac_sign(birth_day, birth_month) # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        planetary_data = {
            "date": current_date,
            "sun_sign": sun_sign, # <-- –¢–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–Ω–∞–∫
            "moon_phase": await get_moon_phase(),
            "mercury_retrograde": await check_mercury_retrograde(),
        }
        return planetary_data
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–æ–∂–µ–Ω–∏–π –ø–ª–∞–Ω–µ—Ç: {e}")
        return get_default_planetary_info()

async def get_real_sun_sign() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –°–æ–ª–Ω—Ü–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        current_date = datetime.now()
        current_day = current_date.day
        current_month = current_date.month
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–Ω–∞–∫ –°–æ–ª–Ω—Ü–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        real_sun_sign = get_zodiac_sign(current_day, current_month)
        return real_sun_sign
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –°–æ–ª–Ω—Ü–∞: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def get_real_moon_phase() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ñ–∞–∑—ã –õ—É–Ω—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        # –†–µ–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞ –õ—É–Ω—ã –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–Ω—è –º–µ—Å—è—Ü–∞
        day_of_month = datetime.now().day
        phases = ["–ù–æ–≤–æ–ª—É–Ω–∏–µ", "–ú–æ–ª–æ–¥–∞—è –ª—É–Ω–∞", "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å", "–ü—Ä–∏–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞",
                 "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ", "–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞", "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å", "–°—Ç–∞—Ä–∞—è –ª—É–Ω–∞"]
        # –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∑—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ)
        if day_of_month <= 3:
            return "–ù–æ–≤–æ–ª—É–Ω–∏–µ"
        elif day_of_month <= 7:
            return "–ú–æ–ª–æ–¥–∞—è –ª—É–Ω–∞"
        elif day_of_month <= 10:
            return "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å"
        elif day_of_month <= 14:
            return "–ü—Ä–∏–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞"
        elif day_of_month <= 17:
            return "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
        elif day_of_month <= 21:
            return "–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞"
        elif day_of_month <= 24:
            return "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å"
        elif day_of_month <= 28:
            return "–°—Ç–∞—Ä–∞—è –ª—É–Ω–∞"
        else:
            return "–ù–æ–≤–æ–ª—É–Ω–∏–µ"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–π —Ñ–∞–∑—ã –õ—É–Ω—ã: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def check_real_mercury_retrograde() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ú–µ—Ä–∫—É—Ä–∏—è –≤ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        # –†–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –ú–µ—Ä–∫—É—Ä–∏—è (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ)
        current_date = datetime.now()
        current_month = current_date.month
        current_day = current_date.day
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–∞ –ú–µ—Ä–∫—É—Ä–∏—è –≤ 2024 –≥–æ–¥—É (–æ–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        mercury_retrograde_periods = [
            (1, 1, 1, 25),    # 1-25 —è–Ω–≤–∞—Ä—è
            (5, 14, 6, 4),    # 14 –º–∞—è - 4 –∏—é–Ω—è
            (9, 6, 9, 26),    # 6-26 —Å–µ–Ω—Ç—è–±—Ä—è
            (12, 30, 12, 31)  # 30-31 –¥–µ–∫–∞–±—Ä—è (–ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥)
        ]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        for start_month, start_day, end_month, end_day in mercury_retrograde_periods:
            if current_month == start_month and start_day <= current_day <= end_day:
                return True
            if current_month == end_month and current_day <= end_day:
                return True
        # –ï—Å–ª–∏ —ç—Ç–æ –¥–µ–∫–∞–±—Ä—å –∏ –ø–æ—Å–ª–µ 30 —á–∏—Å–ª–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —è–Ω–≤–∞—Ä—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞
        if current_month == 12 and current_day >= 30:
            return True
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ú–µ—Ä–∫—É—Ä–∏—è: {e}")
        return False

async def get_moon_phase() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–∑—ã –õ—É–Ω—ã"""
    try:
        day_of_month = datetime.now().day
        phases = ["–ù–æ–≤–æ–ª—É–Ω–∏–µ", "–ú–æ–ª–æ–¥–∞—è –ª—É–Ω–∞", "–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å", "–ü—Ä–∏–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞",
                 "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ", "–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞", "–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å", "–°—Ç–∞—Ä–∞—è –ª—É–Ω–∞"]
        phase_index = (day_of_month - 1) // 4
        return phases[min(phase_index, len(phases) - 1)]
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def check_mercury_retrograde() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ú–µ—Ä–∫—É—Ä–∏–π –≤ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏"""
    try:
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ú–µ—Ä–∫—É—Ä–∏–π –±—ã–≤–∞–µ—Ç –≤ —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–µ –ø—Ä–∏–º–µ—Ä–Ω–æ 3 —Ä–∞–∑–∞ –≤ –≥–æ–¥
        today = datetime.now()
        retrograde_periods = [
            (1, 10, 2, 3),   # –Ø–Ω–≤–∞—Ä—å-–§–µ–≤—Ä–∞–ª—å
            (5, 10, 6, 3),   # –ú–∞–π-–ò—é–Ω—å
            (9, 10, 10, 3),  # –°–µ–Ω—Ç—è–±—Ä—å-–û–∫—Ç—è–±—Ä—å
        ]
        for start_month, start_day, end_month, duration_weeks in retrograde_periods:
            if today.month == start_month and start_day <= today.day <= start_day + duration_weeks * 7:
                return True
            if today.month == end_month and today.day <= duration_weeks * 7:
                return True
        return False
    except:
        return False

def get_default_planetary_info() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return {
        "date": datetime.now().strftime("%d.%m.%Y"),
        "sun_sign": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        "moon_phase": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        "mercury_retrograde": False,
    }


# --- –ù–û–í–ê–Ø/–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ì–û–†–û–°–ö–û–ü–ê –° RAMBLER ---
# horoscope_api.py (—Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏)
# ... (–≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

# --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ì–û–†–û–°–ö–û–ü–ê –° RAMBLER ---
async def get_astrological_forecast(sign: str) -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å rambler.ru.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
        horoscope_url = ZODIAC_RAMBLER_URLS.get(sign)

        if not horoscope_url:
            print(f"–ù–µ –Ω–∞–π–¥–µ–Ω URL –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞: {sign}")
            return await get_alternative_forecast(sign) # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Ä–∞–∑—É

        timeout = aiohttp.ClientTimeout(total=15)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ –±—Ä–∞—É–∑–µ—Ä, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
                "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
                "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
                "Accept-Encoding": "gzip, deflate, br",
                "Connection": "keep-alive",
                "Upgrade-Insecure-Requests": "1",
                "Sec-Fetch-Dest": "document",
                "Sec-Fetch-Mode": "navigate",
                "Sec-Fetch-Site": "none",
                "Cache-Control": "max-age=0"
            }

            async with session.get(horoscope_url, headers=headers) as response:
                if response.status == 200:
                    try:
                        html_content = await response.text()

                        # --- –û–ë–ù–û–í–õ–ï–ù–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –¢–ï–ö–°–¢–ê –ì–û–†–û–°–ö–û–ü–ê ---
                        # –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ç–µ–∫—Å—Ç–æ–º –≥–æ—Ä–æ—Å–∫–æ–ø–∞
                        # –ü—Ä–∏–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: <div class="article__text"><p>...</p><p>...</p></div>
                        # –ò–ª–∏ <div class="jLSeW"><p>...</p><p>...</p></div> (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ —Å–Ω–∏–ø–ø–µ—Ç–∞)
                        
                        # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π—Ç–∏ div —Å –∫–ª–∞—Å—Å–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "article__text"
                        pattern_main = r'<div[^>]*class="[^"]*article__text[^"]*"[^>]*>(.*?)</div>'
                        match_main = re.search(pattern_main, html_content, re.DOTALL | re.IGNORECASE)
                        
                        description_parts = []
                        inner_html_to_parse = ""

                        if match_main:
                            inner_html_to_parse = match_main.group(1)
                        else:
                            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                            # –ò—â–µ–º div, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–±–∑–∞—Ü—ã —Å –≥–æ—Ä–æ—Å–∫–æ–ø–æ–º (–º–µ–Ω–µ–µ —Ç–æ—á–Ω–æ, –Ω–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å)
                            # –ü—Ä–∏–º–µ—Ä: –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π div, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ <p> —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                            print("–û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω 'article__text' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫...")
                            # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö div –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                            divs = re.findall(r'<div[^>]*>(.*?)</div>', html_content, re.DOTALL | re.IGNORECASE)
                            for div_content in divs:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ div –Ω–µ—Å–∫–æ–ª—å–∫–æ <p> —Å —Ç–µ–∫—Å—Ç–æ–º
                                p_tags = re.findall(r'<p[^>]*>(.*?)</p>', div_content, re.DOTALL | re.IGNORECASE)
                                # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–ø—É—Å—Ç—ã–µ –∞–±–∑–∞—Ü—ã
                                non_empty_ps = [p for p in p_tags if p.strip() and not re.match(r'^\s*<[^>]+>\s*$', p)]
                                if len(non_empty_ps) >= 1: # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–µ–ø—É—Å—Ç–æ–π –∞–±–∑–∞—Ü
                                    # –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—â–µ–º div, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞
                                    # (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –≤ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ)
                                    if div_content.count('<div') < 5 and div_content.count('<script') == 0:
                                         inner_html_to_parse = div_content
                                         print("–ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥).")
                                         break # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π

                        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ HTML –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                        if inner_html_to_parse:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ <p> —Ç–µ–≥–∏
                            p_texts = re.findall(r'<p[^>]*>(.*?)</p>', inner_html_to_parse, re.DOTALL | re.IGNORECASE)
                            
                            for p_text in p_texts:
                                # –û—á–∏—â–∞–µ–º HTML —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∞–±–∑–∞—Ü–∞
                                clean_text = re.sub(r'<[^>]+>', '', p_text).strip()
                                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML —Å—É—â–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, &mdash;, &nbsp;, &laquo;, &raquo;)
                                clean_text = re.sub(r'&mdash;', '‚Äî', clean_text)
                                clean_text = re.sub(r'&nbsp;', ' ', clean_text)
                                clean_text = re.sub(r'&laquo;', '"', clean_text)
                                clean_text = re.sub(r'&raquo;', '"', clean_text)
                                clean_text = re.sub(r'&quot;', '"', clean_text)
                                clean_text = re.sub(r'&amp;', '&', clean_text) # –í–∞–∂–Ω–æ –¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º
                                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                                if clean_text:
                                    description_parts.append(clean_text)

                        description = ' '.join(description_parts).strip()

                        if description and len(description) > 20: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
                            print(f"–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å rambler.ru")
                            # Rambler –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω—É–∂–µ–Ω
                            return {
                                "description": description,
                                "compatibility": "–°–º. –æ–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑",
                                "mood": "–°–º. –æ–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑",
                                "color": "–°–º. –æ–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑",
                                "lucky_number": "–°–º. –æ–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑",
                                "lucky_time": "–°–º. –æ–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑",
                                "date_range": "–°–µ–≥–æ–¥–Ω—è"
                            }
                        else:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –∏–∑ HTML –¥–ª—è {sign}. –ò–∑–≤–ª–µ—á–µ–Ω–æ: '{description[:50]}...'")
                        
                        # --- –ö–û–ù–ï–¶ –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø ---

                        # –ï—Å–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è {sign} —Å rambler.ru.")
                        # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
                        return await get_alternative_forecast(sign)

                    except Exception as parse_error:
                        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML –¥–ª—è {sign}: {parse_error}")
                        import traceback
                        traceback.print_exc() # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
                        return await get_alternative_forecast(sign)
                else:
                    error_text = await response.text()
                    print(f"Rambler –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status} –¥–ª—è –∑–Ω–∞–∫–∞ {sign}. –ó–∞–≥–æ–ª–æ–≤–∫–∏: {response.headers}")
                    # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
                    return await get_alternative_forecast(sign)

    except aiohttp.ClientError as client_error:
        print(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Rambler –¥–ª—è {sign}: {client_error}")
        # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
        return await get_alternative_forecast(sign)
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {sign} —Å Rambler: {e}")
        import traceback
        traceback.print_exc() # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
        return await get_alternative_forecast(sign)

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ–∞–π–ª–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...


# --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ì–û –ò–°–¢–û–ß–ù–ò–ö–ê (—Ñ–æ–ª–±—ç–∫ –Ω–∞ aztro) ---
async def get_alternative_forecast(sign: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π aztro API —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º)."""
    print(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {sign} –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (aztro)...")
    try:
        sign_api = ZODIAC_API_MAP.get(sign, "aries")
        current_date = datetime.now().strftime("%Y-%m-%d")
        current_time = datetime.now().strftime("%H:%M:%S")
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        unique_param = hashlib.md5(f"{sign_api}_{current_date}_{current_time}".encode()).hexdigest()[:12]

        timeout = aiohttp.ClientTimeout(total=15)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ ASTRO_API_BASE = "https://aztro.sameerkumar.website"
            url = f"{ASTRO_API_BASE}"
            params = {
                "sign": sign_api,
                "day": "today",
                "_": unique_param,
                "t": current_time
            }
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            headers = {
                "User-Agent": "AstroBot/1.0",
                "Cache-Control": "no-cache",
                "Accept": "application/json",
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7"
            }
            async with session.post(url, params=params, headers=headers) as response:
                if response.status == 200:
                    try:
                        data = await response.json()
                        description = data.get("description", "")
                        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                        if description and not re.search(r'[–∞-—è–ê-–Ø]', description[:100]):
                            translated_description = await translate_text(description)
                            if translated_description and len(translated_description.strip()) > 10:
                                if re.search(r'[–∞-—è–ê-–Ø]', translated_description[:100]):
                                    description = translated_description.strip()
                                else:
                                    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è {sign} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã")
                            else:
                                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è {sign}")
                        print(f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {sign} –ø–æ–ª—É—á–µ–Ω –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (aztro).")
                        return {
                            "description": description,
                            "compatibility": data.get("compatibility", ""),
                            "mood": data.get("mood", ""),
                            "color": data.get("color", ""),
                            "lucky_number": data.get("lucky_number", ""),
                            "lucky_time": data.get("lucky_time", ""),
                            "date_range": data.get("date_range", "")
                        }
                    except Exception as json_error:
                        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (aztro) –¥–ª—è {sign}: {json_error}")
                        return get_default_forecast(sign)
                else:
                    print(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ (aztro) –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status} –¥–ª—è –∑–Ω–∞–∫–∞ {sign}")
                    return get_default_forecast(sign)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {sign} –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (aztro): {e}")
        return get_default_forecast(sign)

def get_default_forecast(sign: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    moods = ["–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π", "—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π", "—Å–ø–æ–∫–æ–π–Ω—ã–π", "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π"]
    colors = ["–∫—Ä–∞—Å–Ω—ã–π", "—Å–∏–Ω–∏–π", "–∑–µ–ª–µ–Ω—ã–π", "—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π", "–∑–æ–ª–æ—Ç–æ–π"]
    return {
        "description": f"{sign}, —Å–µ–≥–æ–¥–Ω—è –ø–ª–∞–Ω–µ—Ç—ã —Å–æ–∑–¥–∞—é—Ç –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è. –°–ª–µ–¥—É–π—Ç–µ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –Ω–µ –±–æ–π—Ç–µ—Å—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è.",
        "compatibility": "–í—Å–µ –∑–Ω–∞–∫–∏",
        "mood": random.choice(moods),
        "color": random.choice(colors),
        "lucky_number": str(random.randint(1, 100)),
        "lucky_time": f"{random.randint(9, 20)}:{random.choice(['00', '15', '30', '45'])}",
        "date_range": "–°–µ–≥–æ–¥–Ω—è"
    }
# --- –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ô –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ê–°–¢–†–û–õ–û–ì–ò–ß–ï–°–ö–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò ---


# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –°–°–´–õ–ö–ò –ù–ê –ù–ê–¢–ê–õ–¨–ù–£–Æ –ö–ê–†–¢–£ ---
async def get_natal_chart_info(birth_date: str, birth_time: str = None, birth_place: str = None) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ –∏ URL –¥–ª—è –∫–Ω–æ–ø–∫–∏"""
    parts = birth_date.split('.')
    if len(parts) != 3:
        return {"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"}
    day, month, year = parts
    natal_chart_url = generate_astro_seek_url(day, month, year, birth_time, birth_place)
    info_lines = []
    info_lines.append("üìä –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞")
    info_lines.append(f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}")
    if birth_time and birth_time != '-':
        info_lines.append(f"‚è∞ –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_time}")
    else:
        info_lines.append("‚è∞ –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: 00:00 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    if birth_place and birth_place != '-':
        info_lines.append(f"üìç –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_place}")
    else:
        info_lines.append("üìç –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    info_lines.append("") # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ–≤–µ—Ç–∞–º–∏
    info_lines.append("üí° –°–æ–≤–µ—Ç—ã:")
    info_lines.append("‚Ä¢ –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è")
    info_lines.append("‚Ä¢ –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 12:00")
    info_lines.append("‚Ä¢ –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤")
    info_lines.append("‚Ä¢ –î–õ–Ø –ë–û–õ–ï–ï –¢–û–ß–ù–û–ì–û –ü–û–ù–ò–ú–ê–ù–ò–Ø –°–í–û–ï–ì–û –î–ê–õ–¨–ù–ï–ô–®–ï–ì–û –ü–£–¢–ò –û–ë–†–ê–¢–ò–¢–ï–°–¨ –ö –ù–ê–®–ò–ú –°–ü–ï–¶–ò–ê–õ–ò–°–¢–ê–ú @Eva_evgenivna99")
    return {
        "info_text": "\n".join(info_lines),
        "url": natal_chart_url
    }

def generate_astro_seek_url(day: str, month: str, year: str, birth_time: str = None, birth_place: str = None) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è astro-seek.com –ø–æ –æ–±—Ä–∞–∑—Ü—É –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    hour = "00"
    minute = "00"
    city_display_name = "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
    city_url_name = "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
    country_code = "RU"
    latitude_degrees = "45"
    latitude_minutes = "3"
    latitude_direction = "0"
    longitude_degrees = "38"
    longitude_minutes = "59"
    longitude_direction = "0"
    if birth_time and birth_time != '-':
        time_parts = birth_time.split(':')
        if len(time_parts) >= 2:
            try:
                hour = f"{int(time_parts[0]):02d}"
                minute = f"{int(time_parts[1]):02d}"
            except ValueError:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ '{birth_time}'. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    if birth_place and birth_place != '-':
        city_display_name = birth_place
        city_url_name = birth_place
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ city_url_name –∏ city_display_name –Ω–µ None ---
    if not city_url_name:
        city_url_name = "Krasnodar" # –ê–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è URL
    if not city_display_name:
        city_display_name = "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
    encoded_city_url = urllib.parse.quote(city_url_name)
    encoded_city_hidden = urllib.parse.quote(city_display_name)
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω base_url (—É–±—Ä–∞–Ω—ã –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∫–æ–Ω—Ü–µ)
    base_url = "https://ru.astro-seek.com/vychislit-natalnaya-karta/"
    params = [
        "edit_input_data=1",
        "natal_input=1",
        "send_calculation=1",
        f"narozeni_den={int(day)}",
        f"narozeni_mesic={int(month)}",
        f"narozeni_rok={year}",
        f"narozeni_hodina={hour}",
        f"narozeni_minuta={minute}",
        f"narozeni_city={encoded_city_url}%2C+{country_code}",
        f"narozeni_mesto_hidden={encoded_city_hidden}",
        f"narozeni_stat_hidden={country_code}",
        "narozeni_podstat_kratky_hidden=",
        f"narozeni_sirka_stupne={latitude_degrees}",
        f"narozeni_sirka_minuty={latitude_minutes}",
        f"narozeni_sirka_smer={latitude_direction}",
        f"narozeni_delka_stupne={longitude_degrees}",
        f"narozeni_delka_minuty={longitude_minutes}",
        f"narozeni_delka_smer={longitude_direction}",
        "narozeni_timezone_form=auto",
        "narozeni_timezone_dst_form=auto",
        "house_system=placidus",
        "hid_fortune=1",
        "hid_fortune_check=on",
        "hid_chiron=1",
        "hid_chiron_check=on",
        "hid_lilith=1",
        "hid_lilith_check=on",
        "hid_uzel=1",
        "hid_uzel_check=on",
        "tolerance=1",
        "tolerance_paral=1.2"
    ]
    full_url = f"{base_url}?{'&'.join(params)}"
    return full_url
# --- –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ô –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –°–°–´–õ–ö–ò –ù–ê –ù–ê–¢–ê–õ–¨–ù–£–Æ –ö–ê–†–¢–£ ---

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ (–≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
def clear_horoscope_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤"""
    global horoscope_cache
    horoscope_cache.clear()
    print("–ö—ç—à –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –æ—á–∏—â–µ–Ω")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º (–±–µ–∑ –∫—ç—à–∞)
async def get_fresh_horoscope(sign: str, birth_day: int = None, birth_month: int = None) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–µ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞"""
    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –∑–Ω–∞–∫–∞
    cache_key = f"{sign}_{datetime.now().strftime('%Y-%m-%d_%H')}"
    if cache_key in horoscope_cache:
        del horoscope_cache[cache_key]
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
    return await get_daily_horoscope(sign, birth_day, birth_month)

# --- –§–£–ù–ö–¶–ò–ò –ü–ï–†–ï–í–û–î–ê –¢–ï–ö–°–¢–ê ---
# (–§—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Ñ–æ–ª–±—ç–∫)
async def translate_text(text: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–Ω–ª–∞–π–Ω-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤"""
    if not text or len(text.strip()) < 2:
        return text
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ –Ω–∞ —Ü–µ–ª–µ–≤–æ–º —è–∑—ã–∫–µ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
    if re.search(r'[–∞-—è–ê-–Ø]', text[:100]):
        return text
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–≤–æ–¥–∞
    methods = [
        translate_with_google_api,
        translate_with_yandex_api,
        translate_with_mymemory_api,
        translate_with_libretranslate_api
    ]
    for method in methods:
        try:
            translated = await method(text)
            if translated and len(translated.strip()) > 5:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
                if re.search(r'[–∞-—è–ê-–Ø]', translated[:100]):
                    return translated.strip()
                else:
                    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {method.__name__} –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ {method.__name__}: {e}")
            continue
    # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π")
    return text

async def translate_with_google_api(text: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ Google Translate API"""
    try:
        timeout = aiohttp.ClientTimeout(total=10)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π Google Translate API
            url = "https://translate.googleapis.com/translate_a/single"
            params = {
                "client": "gtx",
                "sl": "en",
                "tl": "ru",
                "dt": "t",
                "q": text
            }
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if data and len(data) > 0 and data[0]:
                        translated_text = ""
                        for item in data[0]:
                            if item and len(item) > 0 and item[0]:
                                translated_text += item[0]
                        if translated_text and len(translated_text.strip()) > 5:
                            return translated_text.strip()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Google Translate: {e}")
    return ""

async def translate_with_yandex_api(text: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ Yandex Translate API"""
    try:
        timeout = aiohttp.ClientTimeout(total=10)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Yandex Translate —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
            url = "https://translate.yandex.net/api/v1/tr.json/translate"
            params = {
                "lang": "en-ru",
                "text": text,
                "srv": "tr-text",
                "id": f"{hashlib.md5(str(datetime.now().timestamp()).encode()).hexdigest()[:12]}-0-0"
            }
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if "text" in data and data["text"]:
                        translated_text = data["text"][0]
                        if len(translated_text.strip()) > 5:
                            return translated_text.strip()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Yandex Translate: {e}")
    return ""

async def translate_with_mymemory_api(text: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ MyMemory API"""
    try:
        timeout = aiohttp.ClientTimeout(total=10)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            url = "https://api.mymemory.translated.net/get"
            params = {
                "q": text,
                "langpair": "en|ru"
            }
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    if "responseData" in data and "translatedText" in data["responseData"]:
                        translated_text = data["responseData"]["translatedText"]
                        if len(translated_text.strip()) > 5:
                            return translated_text.strip()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ MyMemory Translate: {e}")
    return ""

async def translate_with_libretranslate_api(text: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ LibreTranslate API"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ LibreTranslate —Å–µ—Ä–≤–µ—Ä—ã
        servers = [
            "https://libretranslate.de/translate",
            "https://translate.argosopentech.com/translate",
            "https://libretranslate.pussthecat.org/translate"
        ]
        for server in servers:
            try:
                timeout = aiohttp.ClientTimeout(total=10)
                async with aiohttp.ClientSession(timeout=timeout) as session:
                    payload = {
                        "q": text,
                        "source": "en",
                        "target": "ru",
                        "format": "text"
                    }
                    async with session.post(server, json=payload) as response:
                        if response.status == 200:
                            data = await response.json()
                            if "translatedText" in data:
                                translated_text = data["translatedText"]
                                if len(translated_text.strip()) > 5:
                                    return translated_text.strip()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ LibreTranslate ({server}): {e}")
                continue
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ LibreTranslate: {e}")
    return ""

def detect_language(text: str) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
    Args:
        text (str): –¢–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    Returns:
        str: –ö–æ–¥ —è–∑—ã–∫–∞ ("ru", "en" –∏–ª–∏ "unknown")
    """
    if not text or len(text.strip()) < 2:
        return "unknown"
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É—Å—Å–∫–∏—Ö –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤
    russian_chars = len(re.findall(r'[–∞-—è–ê-–Ø]', text[:100]))
    english_chars = len(re.findall(r'[a-zA-Z]', text[:100]))
    if russian_chars > english_chars and russian_chars > 5:
        return "ru"
    elif english_chars > russian_chars and english_chars > 5:
        return "en"
    else:
        return "unknown"
# --- –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ô –ü–ï–†–ï–í–û–î–ê –¢–ï–ö–°–¢–ê ---

# --- –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
async def translate_horoscope_text(english_text: str) -> str:
    """
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
    Args:
        english_text (str): –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
    Returns:
        str: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
    """
    if not english_text or len(english_text.strip()) < 5:
        return english_text
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    if re.search(r'[–∞-—è–ê-–Ø]', english_text[:100]):
        return english_text
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
    translated = await translate_text(english_text)
    return translated if translated else english_text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
async def test_translation(text: str) -> str:
    """
    –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞
    Args:
        text (str): –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    Returns:
        str: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    print(f"–û—Ä–∏–≥–∏–Ω–∞–ª: {text}")
    translated = await translate_text(text)
    print(f"–ü–µ—Ä–µ–≤–æ–¥: {translated}")
    return translated
# --- –ö–û–ù–ï–¶ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô ---

# --- –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò –ö–ê–ß–ï–°–¢–í–ê –ü–ï–†–ï–í–û–î–ê ---
async def is_good_translation(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    if not text or len(text.strip()) < 10:
        return False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤
    if not re.search(r'[–∞-—è–ê-–Ø]', text[:100]):
        return False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    meaningless_patterns = [
        r'^[^\w\s]+$',  # –¢–æ–ª—å–∫–æ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        r'^\s*$',       # –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
        r'^[0-9\s]+$',  # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    ]
    for pattern in meaningless_patterns:
        if re.match(pattern, text):
            return False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if len(text.strip()) < 20:
        return False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
    if re.search(r'(.)\1{10,}', text):  # –ü–æ–≤—Ç–æ—Ä –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –±–æ–ª–µ–µ 10 —Ä–∞–∑
        return False
    return True
# --- –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ô –ü–†–û–í–ï–†–ö–ò –ö–ê–ß–ï–°–¢–í–ê –ü–ï–†–ï–í–û–î–ê ---
