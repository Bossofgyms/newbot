# scheduler.py

import asyncio
import datetime
from aiogram import Bot
from database import get_subscribed_users
from horoscope_api import get_daily_horoscope
from config import DAILY_TIME_HOUR, DAILY_TIME_MINUTE

async def send_daily_horoscopes(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    try:
        users = await get_subscribed_users()
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        
        for user_id, zodiac_sign in users:
            try:
                horoscope_data = await get_daily_horoscope(zodiac_sign)
                
                message = f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {zodiac_sign}\n\n"
                if horoscope_data.get('date'):
                    message += f"üìÖ {horoscope_data['date']}\n\n"
                message += f"{horoscope_data['description']}\n\n"
                
                details = []
                if horoscope_data.get('mood'):
                    details.append(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {horoscope_data['mood']}")
                if horoscope_data.get('color'):
                    details.append(f"–¶–≤–µ—Ç –¥–Ω—è: {horoscope_data['color']}")
                if horoscope_data.get('lucky_number'):
                    details.append(f"–°—á–∞—Å—Ç–ª–∏–≤–æ–µ —á–∏—Å–ª–æ: {horoscope_data['lucky_number']}")
                if horoscope_data.get('lucky_time'):
                    details.append(f"–°—á–∞—Å—Ç–ª–∏–≤–æ–µ –≤—Ä–µ–º—è: {horoscope_data['lucky_time']}")
                
                if details:
                    message += "\n".join(details) + "\n"
                
                message += "\nüí´ –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
                
                await bot.send_message(user_id, message)
                print(f"–ì–æ—Ä–æ—Å–∫–æ–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                continue
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ send_daily_horoscopes: {e}")

async def scheduler(bot: Bot):
    """–û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    while True:
        try:
            now = datetime.datetime.now()
            target_time = now.replace(hour=DAILY_TIME_HOUR, minute=DAILY_TIME_MINUTE, second=0, microsecond=0)
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if now >= target_time:
                target_time += datetime.timedelta(days=1)
            
            # –ñ–¥–µ–º –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            wait_seconds = (target_time - now).total_seconds()
            hours = int(wait_seconds // 3600)
            minutes = int((wait_seconds % 3600) // 60)
            print(f"–°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç ({target_time.strftime('%d.%m.%Y %H:%M')})")
            
            await asyncio.sleep(wait_seconds)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø—ã
            await send_daily_horoscopes(bot)
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç—É –∂–µ —Å–µ–∫—É–Ω–¥—É
            await asyncio.sleep(60)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞